/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package io.ballerina.stdlib.ai.plugin;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.Paths;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.media.Content;
import io.swagger.v3.oas.models.media.IntegerSchema;
import io.swagger.v3.oas.models.media.MediaType;
import io.swagger.v3.oas.models.media.ObjectSchema;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.StringSchema;
import io.swagger.v3.oas.models.parameters.RequestBody;
import io.swagger.v3.oas.models.responses.ApiResponse;
import io.swagger.v3.oas.models.responses.ApiResponses;

import java.util.List;

/**
 * Generates the OpenAPI specification for the Chat Service.
 * <p>
 * This specification defines schemas, components, request/response bodies, and paths
 * for the chat service API endpoint.
 */
public final class ChatServiceOpenAPISchema {
    private static final String SCHEMA_CHAT_REQ = "ChatReqMessage";
    private static final String SCHEMA_CHAT_RESP = "ChatRespMessage";
    private static final String SCHEMA_ERROR = "ErrorPayload";
    private static final String MEDIA_TYPE_JSON = "application/json";

    private ChatServiceOpenAPISchema() {
    }

    /**
     * Generates and returns the OpenAPI specification for the Chat Service.
     *
     * @return a complete {@link OpenAPI} object representing the Chat Service schema
     */
    public static OpenAPI generate() {
        Components components = createComponents();
        RequestBody chatRequestBody = createRequestBody();
        ApiResponses responses = createResponses();
        Operation postChatOperation = createPostChatOperation(chatRequestBody, responses);
        PathItem chatPath = new PathItem().post(postChatOperation);

        return new OpenAPI()
                .info(createInfo())
                .components(components)
                .paths(new Paths().addPathItem("/chat", chatPath));
    }

    private static Components createComponents() {
        return new Components()
                .addSchemas(SCHEMA_CHAT_REQ, createChatRequestSchema())
                .addSchemas(SCHEMA_CHAT_RESP, createChatResponseSchema())
                .addSchemas(SCHEMA_ERROR, createErrorSchema());
    }

    private static Schema<Object> createChatRequestSchema() {
        return new ObjectSchema()
                .addProperty("sessionId", new StringSchema()
                        .description("Unique identifier for the chat session."))
                .addProperty("message", new StringSchema()
                        .description("The user message sent to the chat service."))
                .required(List.of("sessionId", "message"))
                .description("Represents a request message for the chat service.")
                .additionalProperties(false);
    }

    private static Schema<Object> createChatResponseSchema() {
        return new ObjectSchema()
                .addProperty("message", new StringSchema()
                        .description("Response message generated by the chat service."))
                .required(List.of("message"))
                .description("Represents a response message from the chat service.")
                .additionalProperties(false);
    }

    private static Schema<Object> createErrorSchema() {
        return new ObjectSchema()
                .addProperty("timestamp", new StringSchema()
                        .description("Time when the error occurred."))
                .addProperty("status", new IntegerSchema().format("int64")
                        .description("HTTP status code associated with the error."))
                .addProperty("reason", new StringSchema()
                        .description("Short reason for the error."))
                .addProperty("message", new StringSchema()
                        .description("Detailed message describing the error."))
                .addProperty("path", new StringSchema()
                        .description("Request path where the error occurred."))
                .addProperty("method", new StringSchema()
                        .description("HTTP method used for the request."))
                .required(List.of("timestamp", "status", "reason", "message", "path", "method"))
                .description("Represents a standard error payload.")
                .additionalProperties(false);
    }

    private static RequestBody createRequestBody() {
        return new RequestBody()
                .required(true)
                .content(new Content().addMediaType(MEDIA_TYPE_JSON,
                        new MediaType().schema(new Schema<>().$ref("#/components/schemas/" + SCHEMA_CHAT_REQ))));
    }

    private static ApiResponses createResponses() {
        return new ApiResponses()
                .addApiResponse("201", createApiResponse("Created", SCHEMA_CHAT_RESP))
                .addApiResponse("400", createApiResponse("Bad Request", SCHEMA_ERROR))
                .addApiResponse("500", createApiResponse("Internal Server Error", SCHEMA_ERROR));
    }

    private static ApiResponse createApiResponse(String description, String schemaRef) {
        return new ApiResponse()
                .description(description)
                .content(new Content().addMediaType(MEDIA_TYPE_JSON,
                        new MediaType().schema(new Schema<>().$ref("#/components/schemas/" + schemaRef))));
    }

    private static Operation createPostChatOperation(RequestBody requestBody, ApiResponses responses) {
        return new Operation()
                .operationId("postChat")
                .summary("Send a chat message")
                .description("Processes an input chat message and returns a response.")
                .requestBody(requestBody)
                .responses(responses);
    }

    private static Info createInfo() {
        return new Info()
                .title("Chat Service API")
                .version("1.0.0")
                .description("OpenAPI specification for the Chat Service endpoint.");
    }
}
